/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ch.essmann.gradle.checkjava

import org.gradle.api.GradleException
import org.gradle.api.JavaVersion
import org.gradle.api.Plugin
import org.gradle.api.initialization.Settings
import org.gradle.api.provider.Property
import org.gradle.jvm.toolchain.JavaLanguageVersion

abstract class CheckJavaVersionExtension {
    abstract val minimumJavaVersion: Property<JavaLanguageVersion>
    abstract val maximumJavaVersion: Property<JavaLanguageVersion>
}

@Suppress("UNUSED")
class CheckJavaVersionPlugin : Plugin<Settings> {
    override fun apply(settings: Settings) {
        if (settings.extensions.findByName(EXTENSION_NAME) == null) {
            settings.extensions.create(EXTENSION_NAME, CheckJavaVersionExtension::class.java)
        }
        settings.gradle.settingsEvaluated {
            verifyJavaVersion(settings.extensions.getByType(CheckJavaVersionExtension::class.java))
        }
    }

    private fun currentJavaVersion(): JavaLanguageVersion {
        return JavaLanguageVersion.of(JavaVersion.current().majorVersion)
    }

    private fun verifyJavaVersion(ext: CheckJavaVersionExtension) {
        val currentVersion = currentJavaVersion()
        ext.minimumJavaVersion.orNull?.let { minimumVersion ->
            if (!currentVersion.canCompileOrRun(minimumVersion)) {
                invalidJavaVersion(">=", minimumVersion, currentVersion)
            }
        }
        ext.maximumJavaVersion.orNull?.let { maximumVersion ->
            if (!maximumVersion.canCompileOrRun(currentVersion)) {
                invalidJavaVersion("<=", maximumVersion, currentVersion)
            }
        }
    }

    private fun invalidJavaVersion(type: String, requiredVersion: JavaLanguageVersion, currentVersion: JavaLanguageVersion) {
        val lines = listOf(
            BANNER,
            starPad("INVALID JAVA VERSION"),
            starPad("BUILD REQUIRES JAVA $type $requiredVersion"),
            starPad("ACTIVE VERSION IS $currentVersion"),
            BANNER
        )
        println("\n\n")
        lines.forEachIndexed { index, line ->
            val coffeeLeft = COFFEE_LEFT[index].padEnd(12)
            val coffeeRight = COFFEE_RIGHT[index].padStart(12)
            println((coffeeLeft + line + coffeeRight).padStart(LINE_LEN))
        }
        println("\n")
        throw GradleException("Build requires Java $type $requiredVersion, active version is $currentVersion")
    }

    private fun starPad(input: String): String {
        var result = input
        if (result.length > BANNER_SIZE) {
            result = result.substring(0, BANNER_SIZE)
        }
        result = input.padStart(BANNER_SIZE - (BANNER_SIZE - result.length) / 2)
        result = result.padEnd(BANNER_SIZE)
        return "* $result *"
    }

    companion object {
        private const val EXTENSION_NAME = "checkJavaVersion"
        private const val LINE_LEN = 60
        private const val BANNER_SIZE = 27
        private val BANNER = " ".padEnd(BANNER_SIZE + 3, '*') + " "
        private val COFFEE_LEFT = listOf("    ))) ", "   (((  ", " +-----+", "[|     |", " `-----'")
        private val COFFEE_RIGHT = listOf("   )))  ", "  (((   ", "+-----+ ", "|     |]", "`-----' ")
    }
}
